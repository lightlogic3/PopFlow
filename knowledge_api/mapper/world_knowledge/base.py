from datetime import datetime
from typing import Optional, List, Literal
from sqlmodel import SQLModel, Field


class WorldKnowledgeBase(SQLModel):
    """Worldview Knowledge Base Basic Model"""
    worlds_id: str = Field(..., max_length=64, description="Design ID")
    text: str = Field(..., description="Vectorized corpus required")
    type: str = Field(..., description="type", max_length=32)
    title: str = Field(..., max_length=255, description="title")
    source: Optional[str] = Field(None, max_length=255, description="source")
    tags: Optional[str] = Field(None, max_length=255, description="keyword")
    grade: float = Field(..., description="worldview level")
    relations: Optional[str] = Field(None, description="Relational Storage Knowledge Network")
    relations_role: Optional[str] = Field(None, max_length=255, description="Associated Role ID")


class WorldKnowledge(WorldKnowledgeBase, table=True):
    """Worldview Knowledge Base Database Model"""
    __tablename__ = "world_knowledge"
    
    id: Optional[str] = Field(default=None, primary_key=True, max_length=64, description="Unique ID generated by the snowflake algorithm")
    created_at: datetime = Field(
        default_factory=datetime.now,
        sa_column_kwargs={"server_default": "CURRENT_TIMESTAMP"},
        description="creation time"
    )
    updated_at: datetime = Field(
        default_factory=datetime.now,
        sa_column_kwargs={
            "server_default": "CURRENT_TIMESTAMP",
            "server_onupdate": "CURRENT_TIMESTAMP"
        },
        description="update time"
    )
    
    class Config:
        table_name = "world_knowledge"


class WorldKnowledgeCreate(WorldKnowledgeBase):
    """Create a Worldview Knowledge Base Request Model"""
    type: Literal["base","scene","knowledge"] = Field(..., description="type")


class WorldKnowledgeUpdate(SQLModel):
    """Updating the Worldview Knowledge Base Request Model"""
    worlds_id: Optional[str] = Field(None, max_length=64, description="Design ID")
    text: Optional[str] = Field(None, description="Vectorized corpus required")
    type: Optional[Literal["base","scene","knowledge"]] = Field(None, description="type")
    title: Optional[str] = Field(None, max_length=255, description="title")
    source: Optional[str] = Field(None, max_length=255, description="source")
    tags: Optional[str] = Field(None, max_length=255, description="keyword")
    grade: Optional[float] = Field(None, description="worldview level")
    relations: Optional[str] = Field(None, description="Relational Storage Knowledge Network")
    relations_role: Optional[str] = Field(None, max_length=255, description="Associated Role ID")


class WorldKnowledgeResponse(WorldKnowledgeBase):
    """Worldview Knowledge Base Response Model"""
    id: str
    created_at: datetime
    updated_at: datetime
    
    class Config:
        from_attributes = True


class WorldKnowledgeBulkCreate(SQLModel):
    """Batch Creation Worldview Knowledge Request Model"""
    items: List[WorldKnowledgeCreate] 